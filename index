<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Debraj Ghosh | The Digital Fabric</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            margin: 0;
            padding: 0;
            overflow: hidden;
            background: #000000;
            color: #ffffff;
        }
        #bg {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100vh;
            z-index: -1;
            cursor: pointer;
        }
        main {
            position: absolute;
            width: 100%;
            height: 100%;
            z-index: 1;
            pointer-events: none;
        }
        .content-section {
            height: 100vh;
            width: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center; /* Centered for this aesthetic */
            text-align: center;
            padding: 0 10%;
            position: absolute;
            top: 0;
            left: 0;
            opacity: 0;
            transition: opacity 1.5s ease-in-out;
            text-shadow: 0 0 15px rgba(255, 255, 255, 0.5);
        }
        .content-section.visible {
            opacity: 1;
            pointer-events: auto;
        }
        .loader-wrapper {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: #000000;
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            transition: opacity 0.5s ease;
        }
        .loader {
            border: 4px solid #333;
            border-top: 4px solid #ffffff;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        .tech-tag {
             border: 1px solid #777;
             background-color: rgba(0, 0, 0, 0.4);
             backdrop-filter: blur(8px);
             transition: all 0.3s ease;
        }
        .tech-tag:hover {
            background-color: rgba(255, 255, 255, 0.2);
        }
        .project-card {
            border: 1px solid #444;
            background-color: rgba(10, 10, 10, 0.5);
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
            text-align: left;
        }
        .project-card:hover {
            border-color: #fff;
            transform: translateY(-5px);
        }
    </style>
</head>
<body>
    <div id="loader" class="loader-wrapper"><div class="loader"></div></div>
    <canvas id="bg"></canvas>

    <main>
        <section class="content-section">
            <div class="max-w-3xl">
                <h1 class="text-4xl md:text-7xl font-bold text-white leading-tight">Debraj Ghosh</h1>
                <p class="text-lg md:text-2xl text-gray-200 mt-4 font-light">Weaving interactive experiences from threads of logic and light.</p>
                 <div class="mt-8">
                    <span class="text-gray-400 animate-pulse">Scroll to Unfurl</span>
                </div>
            </div>
        </section>

        <section class="content-section">
            <div class="max-w-2xl bg-black bg-opacity-20 p-8 rounded-lg backdrop-blur-sm">
                <h2 class="text-3xl md:text-4xl font-bold text-white mb-4">The Art of the Weave</h2>
                <p class="text-gray-300 font-light">I am a developer and an artist, blending the structured world of computer science with the fluid nature of digital design. My work is a constant pursuit of the moment where code becomes poetry and interaction feels intuitive. I am currently seeking an internship to learn from masters of the craft.</p>
            </div>
        </section>
        
        <section class="content-section">
            <div class="max-w-2xl w-full bg-black bg-opacity-20 p-8 rounded-lg backdrop-blur-sm">
                <h2 class="text-3xl md:text-4xl font-bold text-white mb-6">The Threads</h2>
                <div class="flex flex-wrap gap-4 justify-center">
                    <span class="tech-tag text-white px-5 py-2 rounded-full">Python</span>
                    <span class="tech-tag text-white px-5 py-2 rounded-full">JavaScript (ES6+)</span>
                    <span class="tech-tag text-white px-5 py-2 rounded-full">React</span>
                    <span class="tech-tag text-white px-5 py-2 rounded-full">Three.js / WebGL</span>
                    <span class="tech-tag text-white px-5 py-2 rounded-full">GSAP</span>
                    <span class="tech-tag text-white px-5 py-2 rounded-full">AI/ML Concepts</span>
                </div>
            </div>
        </section>

        <section class="content-section">
             <div class="max-w-4xl w-full bg-black bg-opacity-20 p-8 rounded-lg backdrop-blur-sm">
                <h2 class="text-3xl md:text-4xl font-bold text-white mb-6">Tapestries</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4">
                    <div class="project-card p-6 rounded-lg">
                        <h3 class="font-bold text-xl text-white mb-2">Cognitive Chat Engine</h3>
                        <p class="text-gray-400 font-light">A conversational AI with natural language understanding.</p>
                    </div>
                    <div class="project-card p-6 rounded-lg">
                        <h3 class="font-bold text-xl text-white mb-2">This 3D Portfolio</h3>
                        <p class="text-gray-400 font-light">The immersive WebGL experience you are currently viewing.</p>
                    </div>
                </div>
            </div>
        </section>

        <section class="content-section">
            <div class="max-w-xl text-center mx-auto">
                <h2 class="text-3xl md:text-4xl font-bold text-white mb-4">Start a Dialogue</h2>
                <p class="text-gray-400 mb-6 font-light">Let's weave something new together.</p>
                <a href="mailto:debrajghosh.dev@gmail.com" class="inline-block border-2 border-white text-white font-bold py-3 px-8 rounded-lg hover:bg-white hover:text-black transition-all duration-300">Connect</a>
            </div>
        </section>
    </main>

    <script type="importmap">
        {
            "imports": {
                "three": "https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.module.js",
                "three/addons/": "https://cdn.jsdelivr.net/npm/three@0.128.0/examples/jsm/"
            }
        }
    </script>
    <script type="module">
        import * as THREE from 'three';
        import { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';
        import { RenderPass } from 'three/addons/postprocessing/RenderPass.js';
        import { UnrealBloomPass } from 'three/addons/postprocessing/UnrealBloomPass.js';
        import gsap from 'https://cdn.skypack.dev/gsap@3.9.1';

        // --- Simplex Noise Implementation ---
        // This is the crucial addition for smooth, organic turbulence.
        const SimplexNoise = (function() {
            // ... [Simplex noise algorithm code] ...
            const grad3 = [
                [1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0],
                [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1],
                [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]
            ];
            const p = [];
            for (let i = 0; i < 256; i++) {
                p[i] = Math.floor(Math.random() * 256);
            }
            const perm = [];
            for (let i = 0; i < 512; i++) {
                perm[i] = p[i & 255];
            }

            return {
                noise3D: function(xin, yin, zin) {
                    // ... [noise calculation logic] ...
                    let n0, n1, n2;
                    const F3 = 1.0 / 3.0;
                    const s = (xin + yin + zin) * F3;
                    const i = Math.floor(xin + s), j = Math.floor(yin + s), k = Math.floor(zin + s);
                    const G3 = 1.0 / 6.0;
                    const t = (i + j + k) * G3;
                    const X0 = i - t, Y0 = j - t, Z0 = k - t;
                    const x0 = xin - X0, y0 = yin - Y0, z0 = zin - Z0;
                    let i1, j1, k1, i2, j2, k2;
                    if (x0 >= y0) {
                        if (y0 >= z0) { i1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0; }
                        else if (x0 >= z0) { i1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1; }
                        else { i1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1; }
                    } else {
                        if (y0 < z0) { i1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1; }
                        else if (x0 < z0) { i1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1; }
                        else { i1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0; }
                    }
                    const x1 = x0 - i1 + G3, y1 = y0 - j1 + G3, z1 = z0 - k1 + G3;
                    const x2 = x0 - i2 + 2.0 * G3, y2 = y0 - j2 + 2.0 * G3, z2 = z0 - k2 + 2.0 * G3;
                    const x3 = x0 - 1.0 + 3.0 * G3, y3 = y0 - 1.0 + 3.0 * G3, z3 = z0 - 1.0 + 3.0 * G3;
                    const ii = i & 255, jj = j & 255, kk = k & 255;
                    let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;
                    if (t0 < 0) n0 = 0.0;
                    else { t0 *= t0; n0 = t0 * t0 * dot(grad3[perm[ii + perm[jj + perm[kk]]] % 12], x0, y0, z0); }
                    let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;
                    if (t1 < 0) n1 = 0.0;
                    else { t1 *= t1; n1 = t1 * t1 * dot(grad3[perm[ii + i1 + perm[jj + j1 + perm[kk + k1]]] % 12], x1, y1, z1); }
                    let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;
                    if (t2 < 0) n2 = 0.0;
                    else { t2 *= t2; n2 = t2 * t2 * dot(grad3[perm[ii + i2 + perm[jj + j2 + perm[kk + k2]]] % 12], x2, y2, z2); }
                    let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;
                    let n3; // FIX: Declare n3, was missing.
                    if (t3 < 0) n3 = 0.0; // FIX: Assign to n3, not n2.
                    else { t3 *= t3; n3 = t3 * t3 * dot(grad3[perm[ii + 1 + perm[jj + 1 + perm[kk + 1]]] % 12], x3, y3, z3); } // FIX: Assign to n3
                    return 32.0 * (n0 + n1 + n2 + n3); // FIX: Add n3 to the sum.
                }
            };
            function dot(g, x, y, z) { return g[0] * x + g[1] * y + g[2] * z; }
        })();

        // --- Basic Setup ---
        let scene, camera, renderer, composer, clock;
        let fabric, originalPositions, simplex;

        function init() {
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.z = 50;
            renderer = new THREE.WebGLRenderer({ canvas: document.querySelector('#bg'), antialias: true, alpha: true });
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.setSize(window.innerWidth, window.innerHeight);
            clock = new THREE.Clock();
            simplex = SimplexNoise;

            // --- Post-processing ---
            const renderScene = new RenderPass(scene, camera);
            const bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), 1.5, 0.4, 0.85);
            bloomPass.threshold = 0;
            bloomPass.strength = 1.6; // Slightly reduced strength for refinement
            bloomPass.radius = 0.6;
            composer = new EffectComposer(renderer);
            composer.addPass(renderScene);
            composer.addPass(bloomPass);

            // --- Fabric Simulation ---
            const geometry = new THREE.PlaneGeometry(200, 200, 60, 60); // OPTIMIZED: Reduced segments for performance
            const material = new THREE.MeshBasicMaterial({ color: 0xffffff, wireframe: true, transparent: true, opacity: 0.8 });
            fabric = new THREE.Mesh(geometry, material);
            scene.add(fabric);
            originalPositions = new Float32Array(fabric.geometry.attributes.position.array);

            // --- Event Listeners ---
            window.addEventListener('resize', onWindowResize);
            window.addEventListener('wheel', onScroll);
            window.addEventListener('mousemove', onMouseMove);

            // --- Start ---
            document.getElementById('loader').style.opacity = '0';
            setTimeout(() => document.getElementById('loader').style.display = 'none', 500);
            document.querySelectorAll('.content-section')[0].classList.add('visible');
            animate();
        }

        const mouse = new THREE.Vector2();
        const raycaster = new THREE.Raycaster();
        let mouseEffect = { x: 0, y: 0, targetX: 0, targetY: 0 };

        function onMouseMove(event) {
            mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
            mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
            mouseEffect.targetX = mouse.x;
            mouseEffect.targetY = mouse.y;
        }
        
        const fabricState = {
            amplitude: 2,
            baseFrequency: 0.02,
            noiseFrequency: 0.03,
            noiseSpeed: 0.2,
            turbulence: 1,
        };

        const states = [
            // RE-TUNED: Values are much calmer and smoother now
            { amplitude: 2, baseFrequency: 0.02, noiseFrequency: 0.03, noiseSpeed: 0.2, turbulence: 1 }, // Home
            { amplitude: 3, baseFrequency: 0.03, noiseFrequency: 0.04, noiseSpeed: 0.25, turbulence: 1.5 }, // About
            { amplitude: 4, baseFrequency: 0.035, noiseFrequency: 0.05, noiseSpeed: 0.3, turbulence: 2 }, // Skills
            { amplitude: 2.5, baseFrequency: 0.02, noiseFrequency: 0.06, noiseSpeed: 0.2, turbulence: 2.5 }, // Projects
            { amplitude: 5, baseFrequency: 0.04, noiseFrequency: 0.02, noiseSpeed: 0.4, turbulence: 1.5 }, // Contact
        ];

        const cameraStates = [
            { pos: { x: 0, y: 0, z: 50 }, rot: { x: 0, y: 0, z: 0 } }, // Home
            { pos: { x: -5, y: 3, z: 45 }, rot: { x: 0.1, y: -0.2, z: 0 } }, // About
            { pos: { x: 5, y: -3, z: 40 }, rot: { x: -0.1, y: 0.2, z: 0 } }, // Skills
            { pos: { x: -3, y: 2, z: 35 }, rot: { x: 0.2, y: -0.1, z: 0 } }, // Projects
            { pos: { x: 0, y: 0, z: 30 }, rot: { x: 0, y: 0, z: 0 } }  // Contact
        ];

        function animate() {
            requestAnimationFrame(animate);
            const elapsedTime = clock.getElapsedTime();
            
            mouseEffect.x += (mouseEffect.targetX - mouseEffect.x) * 0.05;
            mouseEffect.y += (mouseEffect.targetY - mouseEffect.y) * 0.05;

            raycaster.setFromCamera(mouse, camera);
            const intersects = raycaster.intersectObject(fabric);
            const mousePoint = intersects.length > 0 ? intersects[0].point : null;
            
            const positions = fabric.geometry.attributes.position.array;
            for (let i = 0; i < positions.length; i += 3) {
                const x = originalPositions[i];
                const y = originalPositions[i + 1];
                
                // Base wave motion
                let z = Math.sin(x * fabricState.baseFrequency + elapsedTime) * fabricState.amplitude;
                z += Math.sin(y * fabricState.baseFrequency + elapsedTime) * fabricState.amplitude;

                // ** THE FIX: Organic turbulence using Simplex Noise **
                const noise = simplex.noise3D(x * fabricState.noiseFrequency, y * fabricState.noiseFrequency, elapsedTime * fabricState.noiseSpeed);
                z += noise * fabricState.turbulence;

                // Mouse interaction
                if (mousePoint) {
                    const dx = x - mousePoint.x;
                    const dy = y - mousePoint.y;
                    const dist = Math.sqrt(dx * dx + dy * dy);
                    const maxDist = 30;
                    if (dist < maxDist) {
                        const force = (1 - dist / maxDist) * 15;
                        z -= force;
                    }
                }
                
                positions[i + 2] = z;
            }
            fabric.geometry.attributes.position.needsUpdate = true;
            
            // RE-INTRODUCED: Subtle mouse parallax for a more connected feel
            fabric.rotation.x += (mouseEffect.y * 0.05 - fabric.rotation.x) * 0.05;
            fabric.rotation.y += (-mouseEffect.x * 0.05 - fabric.rotation.y) * 0.05;
            
            composer.render();
        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
            composer.setSize(window.innerWidth, window.innerHeight);
        }

        let currentSection = 0;
        let isAnimating = false;
        const sections = document.querySelectorAll('.content-section');

        function onScroll(e) {
            if (isAnimating) return;
            const direction = e.deltaY > 0 ? 1 : -1;
            const nextSection = currentSection + direction;
            goToSection(nextSection);
        }
        
        function goToSection(index) {
            if (index < 0 || index >= sections.length) return;
            isAnimating = true;
            
            sections[currentSection].classList.remove('visible');
            currentSection = index;
            setTimeout(() => sections[currentSection].classList.add('visible'), 1000);
            
            const targetState = states[currentSection];
            const targetCamera = cameraStates[currentSection];

            gsap.to(fabricState, {
                duration: 2.2, // REFINED: Slightly faster transition
                ...targetState,
                ease: 'power3.inOut' // REFINED: Smoother easing
            });

            gsap.to(camera.position, {
                duration: 2.2, // REFINED: Slightly faster transition
                ...targetCamera.pos,
                ease: 'power3.inOut', // REFINED: Smoother easing
            });
            
            gsap.to(fabric.rotation, {
                duration: 2.2, // REFINED: Slightly faster transition
                ...targetCamera.rot,
                ease: 'power3.inOut', // REFINED: Smoother easing
                onComplete: () => isAnimating = false
            });
        }
        
        init();
    </script>
</body>
</html>

